(defun prompt-read (prompt)
    (format *query-io* "~a: " prompt)
    (force-output *query-io*)
    (read-line *query-io*)
)

(defun numbrix ()
    (setf input (prompt-read "Hello, welcome to Numbrix. Please enter in the file you would like to load"))
    (setf info (read-file input))
    (setf board (car info))
    (setf elements_left (car (cdr info)))
    (print-board board)

    (setf input (prompt-read "Enter in your position \(row col element\)"))
    (insert-element-into-board input board)
    (- elements_left 1)
    (print-board board)
    
    (if (= elements_left 0)
        (check-if-correct board)
    )
    )
)

(defun check-if-correct (board)

)

(defun insert-element-into-board (element board)
    (setf dim (array-dimension board 0))
    (setf row (parse-integer (subseq element 0 1)))
    (setf col (parse-integer (subseq element 2 3)))
    (setf elmt (parse-integer (subseq element 4)))
    (setf row (- dim row))
    (setf col (- col 1))
    (setf (aref board row col) elmt)
)

(defun read-file (file_name)
    * (with-open-file (stream file_name)
        (setf dim (parse-integer (read-line stream nil)))
        (setf elements_left (* dim dim))
        (setf board (make-array (list dim dim)))
        (do ((line (read-line stream nil)
                   (read-line stream nil)))
            
            ((null line))
            (insert-element-into-board line board)
            (- elements_left 1)
        )
        (return-from read-file (list board elements_left))
    )
)

(defun print-board (board)
    (loop for i below (array-total-size board) do
        (if (zerop (mod i (array-dimension board 0)))
            (terpri)
            (princ #\Space))
        (setf elmt (row-major-aref board i))
        (if (null elmt)
            (progn
                (princ #\Space)
                (princ #\Space)
            )
            (progn
                (if (> 10 elmt)
                    (progn
                        (princ #\Space)
                        (princ elmt)
                    )
                (princ elmt)
                )
            )
        )
    )
    (terpri)
)
